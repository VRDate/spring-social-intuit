buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/plugins-release' }
	maven { url "http://repo1.maven.org/maven2/" }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.2.2'
        classpath 'com.sun.xml.bind:jaxb-xjc:2.2.4-1'
   }
}

configurations {
   xjc
 }
dependencies {
		xjc group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.4-1'
}

configure(allprojects) {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'

    group = 'org.springframework.social'

    sourceCompatibility=1.6
    targetCompatibility=1.6

    ext {
		springSocialVersion = '1.1.0.M4'
		jacksonVersion = '2.2.2'
		junitVersion = '4.11'
		mockitoVersion = '1.9.5'
		springVersion = '3.2.6.RELEASE'
	 	springSecurityCryptoVersion = '3.2.0.RELEASE'
		springWSVersion = '2.1.4.RELEASE'
		hamcrestVersion = '1.3'
		commonsVersion = '1.4'
		xmlunitVersion = '1.4'
    }

    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none']

    sourceSets.test.resources.srcDirs = ['src/test/resources', 'src/test/java']
    sourceSets.main.resources.srcDirs = ['src/main/resources', 'src/main/java', 'src/xjc/java', 'src/xjc/java']
    

    test.systemProperty("java.awt.headless", "true")

    repositories {
        maven { url "http://maven.springframework.org/release" }
        maven { url "http://repo.springsource.org/snapshot" }
        maven { url "http://repo.springsource.org/milestone" }
        maven { url "http://repo1.maven.org/maven2/" }
    }

    dependencies {
        testCompile ("org.hamcrest:hamcrest-library:$hamcrestVersion")
        testCompile ("junit:junit-dep:$junitVersion")
        testCompile ("org.mockito:mockito-core:$mockitoVersion")
        testCompile ("org.springframework:spring-test:$springVersion")
        testCompile ("commons-io:commons-io:$commonsVersion")
        testCompile ("xmlunit:xmlunit:$xmlunitVersion")
        
    }

    // servlet-api (2.5) and tomcat-servlet-api (3.0) classpath entries should not be
    // exported to dependent projects in Eclipse to avoid false compilation errors due
    // to changing APIs across these versions
    eclipse.classpath.file.whenMerged { classpath ->
        classpath.entries.findAll { entry -> entry.path.contains('servlet-api') }*.exported = false
    }
}

configure(subprojects) { subproject ->
    apply from: "${rootProject.projectDir}/publish-maven.gradle"
	
    jar {
        manifest.attributes['Implementation-Title'] = subproject.name
        manifest.attributes['Implementation-Version'] = subproject.version

        from("${rootProject.projectDir}/src/dist") {
            include "license.txt"
            include "notice.txt"
            into "META-INF"
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }
    }
   
    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project('spring-social-intuit') {
    description = 'Intuit API'
    dependencies {
       compile ("org.springframework.social:spring-social-core:$springSocialVersion")
       compile ("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
       compile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
       compile ("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
       compile ("org.springframework.security:spring-security-crypto:$springSecurityCryptoVersion")
       compile ("javax.xml.bind:jaxb-api:2.2.6")
       compile ("com.sun.xml.bind:jaxb-impl:2.2.4")
       compile ("org.jvnet.jaxb2_commons:jaxb2-basics:0.5.3")
//       compile ("org.simpleframework:simple-xml:2.6.2")
    }
}

configure(rootProject) {
    description = 'Spring Social Intuit'

    apply plugin: 'docbook-reference'

    reference {
        ext.sourceDir = file('src/reference/docbook')
    }

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()

    dependencies { // for integration tests
    }

	//Not Sure the best way to add generate source to the compile path so write to src/main/java
	task xjc () {
		xjc.generateSrc = file('spring-social-intuit/src/main/java')
		ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xjc.asPath)
		ant.xjc(
			destdir: xjc.generateSrc.path,
			schema:	 'spring-social-intuit/src/main/resources/xsd/qbo.xsd',
			binding: 'spring-social-intuit/src/main/resources/xsd/GlobalBindings.xjb',
			extension: true
		)		 	
	}

	task xjcUserResponse () {
		xjcUserResponse.generateSrc = file('spring-social-intuit/src/main/java')
		ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xjc.asPath)
		ant.xjc(
			destdir: xjcUserResponse.generateSrc.path,
			schema:	 'spring-social-intuit/src/main/resources/xsd/UserResponse.xsd',
			binding: 'spring-social-intuit/src/main/resources/xsd/GlobalBindings.xjb',
			extension: true
		)		 	
	}
	
    task api(type: Javadoc) {
        group = 'Documentation'
        description = 'Generates aggregated Javadoc API documentation.'
        title = "${rootProject.description} ${version} API"
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.overview = 'src/api/overview.html'
        options.links(
            'http://docs.jboss.org/jbossas/javadoc/4.0.5/connector'
        )
        source subprojects.collect { project ->
            project.sourceSets.main.allJava
        }
        destinationDir = new File(buildDir, "api")
        classpath = files(subprojects.collect { project ->
            project.sourceSets.main.compileClasspath
        })
        maxMemory = '1024m'
    }

    task docsZip(type: Zip) {
        group = 'Distribution'
        classifier = 'docs'
        description = "Builds -${classifier} archive containing api and reference " +
            "for deployment at static.springframework.org/spring-social/docs."

        from('src/dist') {
            include 'changelog.txt'
        }

        from (api) {
            into 'api'
        }

        from (reference) {
            into 'reference'
        }
    }

    task schemaZip(type: Zip) {
        group = 'Distribution'
        classifier = 'schema'
        description = "Builds -${classifier} archive containing all " +
            "XSDs for deployment at static.springframework.org/schema."

        subprojects.each { subproject ->
            def Properties schemas = new Properties();

            subproject.sourceSets.main.resources.find {
                it.path.endsWith('META-INF/spring.schemas')
            }?.withInputStream { schemas.load(it) }

            for (def key : schemas.keySet()) {
                def shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')
                assert shortName != key
                File xsdFile = subproject.sourceSets.main.resources.find {
                    it.path.endsWith(schemas.get(key))
                }
                assert xsdFile != null
                into (shortName) {
                    from xsdFile.path
                }
            }
        }
    }

    task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
        group = 'Distribution'
        classifier = 'dist'
        description = "Builds -${classifier} archive, containing all jars and docs, " +
                      "suitable for community download page."

        ext.baseDir = "${project.name}-${project.version}";

        from('src/dist') {
            include 'readme.txt'
            include 'license.txt'
            include 'notice.txt'
            into "${baseDir}"
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }

        from(zipTree(docsZip.archivePath)) {
            into "${baseDir}/docs"
        }

        subprojects.each { subproject ->
            into ("${baseDir}/libs") {
                from subproject.jar
                if (subproject.tasks.findByPath('sourcesJar')) {
                    from subproject.sourcesJar
                }
                if (subproject.tasks.findByPath('javadocJar')) {
                    from subproject.javadocJar
                }
            }
        }
    }

    artifacts {
        archives docsZip
        archives schemaZip
        archives distZip
    }

    task wrapper(type: Wrapper) {
        description = 'Generates gradlew[.bat] scripts'
        gradleVersion = '1.3'
    }

}

task updateRootDocs << {
    copy {
        from 'src/dist'
        into "${rootProject.projectDir}"
        include 'notice.txt'
        expand(copyright: new Date().format('yyyy'), version: project.version)
        rename { filename -> 'NOTICE' }
    }

    copy {
        from 'src/dist'
        into "${rootProject.projectDir}"
        include 'license.txt'
        rename { filename -> 'LICENSE' }
    }
}

build.dependsOn('updateRootDocs')