//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.05.12 at 06:01:42 PM PDT 
//


package com.intuit.sb.cdm.qbo.v2;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Calendar;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Preferences complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Preferences">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;group ref="{http://www.intuit.com/sb/cdm/v2}PrefsAccountingGroup"/>
 *         &lt;group ref="{http://www.intuit.com/sb/cdm/v2}PrefsMultiCurrency"/>
 *         &lt;group ref="{http://www.intuit.com/sb/cdm/v2}PrefsPurchaseAndVendor"/>
 *         &lt;group ref="{http://www.intuit.com/sb/cdm/v2}PrefsSalesAndCustomers"/>
 *         &lt;group ref="{http://www.intuit.com/sb/cdm/v2}PrefsSalesTax"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Preferences", propOrder = {
    "usingAccountNumbers",
    "requiringAccounts",
    "usingClasses",
    "closingDate",
    "usingMultiCurrency",
    "homeCurrency",
    "usingInventory",
    "daysBillsAreDue",
    "discountAccountId",
    "discountAccountName",
    "shipMethodId",
    "shipMethodName",
    "defaultMarkup",
    "trackReimbursableExpenses",
    "autoApplyPayments",
    "taxId",
    "taxName",
    "taxGroupId",
    "taxGroupName",
    "paySalesTax"
})
public class Preferences
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "UsingAccountNumbers")
    protected boolean usingAccountNumbers;
    @XmlElement(name = "RequiringAccounts")
    protected boolean requiringAccounts;
    @XmlElement(name = "UsingClasses")
    protected boolean usingClasses;
    @XmlElement(name = "ClosingDate", type = String.class)
    @XmlJavaTypeAdapter(Adapter2 .class)
    @XmlSchemaType(name = "date")
    protected Calendar closingDate;
    @XmlElement(name = "UsingMultiCurrency")
    protected boolean usingMultiCurrency;
    @XmlElement(name = "HomeCurrency")
    protected CurrencyCode homeCurrency;
    @XmlElement(name = "UsingInventory")
    protected boolean usingInventory;
    @XmlElement(name = "DaysBillsAreDue", required = true)
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger daysBillsAreDue;
    @XmlElement(name = "DiscountAccountId")
    protected IdType discountAccountId;
    @XmlElement(name = "DiscountAccountName")
    protected String discountAccountName;
    @XmlElement(name = "ShipMethodId")
    protected IdType shipMethodId;
    @XmlElement(name = "ShipMethodName")
    protected String shipMethodName;
    @XmlElement(name = "DefaultMarkup", required = true)
    protected BigDecimal defaultMarkup;
    @XmlElement(name = "TrackReimbursableExpenses")
    protected boolean trackReimbursableExpenses;
    @XmlElement(name = "AutoApplyPayments")
    protected boolean autoApplyPayments;
    @XmlElement(name = "TaxId")
    protected IdType taxId;
    @XmlElement(name = "TaxName")
    protected String taxName;
    @XmlElement(name = "TaxGroupId")
    protected IdType taxGroupId;
    @XmlElement(name = "TaxGroupName")
    protected String taxGroupName;
    @XmlElement(name = "PaySalesTax")
    protected PaySalesTaxEnum paySalesTax;

    /**
     * Gets the value of the usingAccountNumbers property.
     * 
     */
    public boolean isUsingAccountNumbers() {
        return usingAccountNumbers;
    }

    /**
     * Sets the value of the usingAccountNumbers property.
     * 
     */
    public void setUsingAccountNumbers(boolean value) {
        this.usingAccountNumbers = value;
    }

    /**
     * Gets the value of the requiringAccounts property.
     * 
     */
    public boolean isRequiringAccounts() {
        return requiringAccounts;
    }

    /**
     * Sets the value of the requiringAccounts property.
     * 
     */
    public void setRequiringAccounts(boolean value) {
        this.requiringAccounts = value;
    }

    /**
     * Gets the value of the usingClasses property.
     * 
     */
    public boolean isUsingClasses() {
        return usingClasses;
    }

    /**
     * Sets the value of the usingClasses property.
     * 
     */
    public void setUsingClasses(boolean value) {
        this.usingClasses = value;
    }

    /**
     * Gets the value of the closingDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public Calendar getClosingDate() {
        return closingDate;
    }

    /**
     * Sets the value of the closingDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setClosingDate(Calendar value) {
        this.closingDate = value;
    }

    /**
     * Gets the value of the usingMultiCurrency property.
     * 
     */
    public boolean isUsingMultiCurrency() {
        return usingMultiCurrency;
    }

    /**
     * Sets the value of the usingMultiCurrency property.
     * 
     */
    public void setUsingMultiCurrency(boolean value) {
        this.usingMultiCurrency = value;
    }

    /**
     * Gets the value of the homeCurrency property.
     * 
     * @return
     *     possible object is
     *     {@link CurrencyCode }
     *     
     */
    public CurrencyCode getHomeCurrency() {
        return homeCurrency;
    }

    /**
     * Sets the value of the homeCurrency property.
     * 
     * @param value
     *     allowed object is
     *     {@link CurrencyCode }
     *     
     */
    public void setHomeCurrency(CurrencyCode value) {
        this.homeCurrency = value;
    }

    /**
     * Gets the value of the usingInventory property.
     * 
     */
    public boolean isUsingInventory() {
        return usingInventory;
    }

    /**
     * Sets the value of the usingInventory property.
     * 
     */
    public void setUsingInventory(boolean value) {
        this.usingInventory = value;
    }

    /**
     * Gets the value of the daysBillsAreDue property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getDaysBillsAreDue() {
        return daysBillsAreDue;
    }

    /**
     * Sets the value of the daysBillsAreDue property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setDaysBillsAreDue(BigInteger value) {
        this.daysBillsAreDue = value;
    }

    /**
     * Gets the value of the discountAccountId property.
     * 
     * @return
     *     possible object is
     *     {@link IdType }
     *     
     */
    public IdType getDiscountAccountId() {
        return discountAccountId;
    }

    /**
     * Sets the value of the discountAccountId property.
     * 
     * @param value
     *     allowed object is
     *     {@link IdType }
     *     
     */
    public void setDiscountAccountId(IdType value) {
        this.discountAccountId = value;
    }

    /**
     * Gets the value of the discountAccountName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDiscountAccountName() {
        return discountAccountName;
    }

    /**
     * Sets the value of the discountAccountName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDiscountAccountName(String value) {
        this.discountAccountName = value;
    }

    /**
     * Gets the value of the shipMethodId property.
     * 
     * @return
     *     possible object is
     *     {@link IdType }
     *     
     */
    public IdType getShipMethodId() {
        return shipMethodId;
    }

    /**
     * Sets the value of the shipMethodId property.
     * 
     * @param value
     *     allowed object is
     *     {@link IdType }
     *     
     */
    public void setShipMethodId(IdType value) {
        this.shipMethodId = value;
    }

    /**
     * Gets the value of the shipMethodName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShipMethodName() {
        return shipMethodName;
    }

    /**
     * Sets the value of the shipMethodName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShipMethodName(String value) {
        this.shipMethodName = value;
    }

    /**
     * Gets the value of the defaultMarkup property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getDefaultMarkup() {
        return defaultMarkup;
    }

    /**
     * Sets the value of the defaultMarkup property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setDefaultMarkup(BigDecimal value) {
        this.defaultMarkup = value;
    }

    /**
     * Gets the value of the trackReimbursableExpenses property.
     * 
     */
    public boolean isTrackReimbursableExpenses() {
        return trackReimbursableExpenses;
    }

    /**
     * Sets the value of the trackReimbursableExpenses property.
     * 
     */
    public void setTrackReimbursableExpenses(boolean value) {
        this.trackReimbursableExpenses = value;
    }

    /**
     * Gets the value of the autoApplyPayments property.
     * 
     */
    public boolean isAutoApplyPayments() {
        return autoApplyPayments;
    }

    /**
     * Sets the value of the autoApplyPayments property.
     * 
     */
    public void setAutoApplyPayments(boolean value) {
        this.autoApplyPayments = value;
    }

    /**
     * Gets the value of the taxId property.
     * 
     * @return
     *     possible object is
     *     {@link IdType }
     *     
     */
    public IdType getTaxId() {
        return taxId;
    }

    /**
     * Sets the value of the taxId property.
     * 
     * @param value
     *     allowed object is
     *     {@link IdType }
     *     
     */
    public void setTaxId(IdType value) {
        this.taxId = value;
    }

    /**
     * Gets the value of the taxName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTaxName() {
        return taxName;
    }

    /**
     * Sets the value of the taxName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTaxName(String value) {
        this.taxName = value;
    }

    /**
     * Gets the value of the taxGroupId property.
     * 
     * @return
     *     possible object is
     *     {@link IdType }
     *     
     */
    public IdType getTaxGroupId() {
        return taxGroupId;
    }

    /**
     * Sets the value of the taxGroupId property.
     * 
     * @param value
     *     allowed object is
     *     {@link IdType }
     *     
     */
    public void setTaxGroupId(IdType value) {
        this.taxGroupId = value;
    }

    /**
     * Gets the value of the taxGroupName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTaxGroupName() {
        return taxGroupName;
    }

    /**
     * Sets the value of the taxGroupName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTaxGroupName(String value) {
        this.taxGroupName = value;
    }

    /**
     * Gets the value of the paySalesTax property.
     * 
     * @return
     *     possible object is
     *     {@link PaySalesTaxEnum }
     *     
     */
    public PaySalesTaxEnum getPaySalesTax() {
        return paySalesTax;
    }

    /**
     * Sets the value of the paySalesTax property.
     * 
     * @param value
     *     allowed object is
     *     {@link PaySalesTaxEnum }
     *     
     */
    public void setPaySalesTax(PaySalesTaxEnum value) {
        this.paySalesTax = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Preferences)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Preferences that = ((Preferences) object);
        {
            boolean lhsUsingAccountNumbers;
            lhsUsingAccountNumbers = this.isUsingAccountNumbers();
            boolean rhsUsingAccountNumbers;
            rhsUsingAccountNumbers = that.isUsingAccountNumbers();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usingAccountNumbers", lhsUsingAccountNumbers), LocatorUtils.property(thatLocator, "usingAccountNumbers", rhsUsingAccountNumbers), lhsUsingAccountNumbers, rhsUsingAccountNumbers)) {
                return false;
            }
        }
        {
            boolean lhsRequiringAccounts;
            lhsRequiringAccounts = this.isRequiringAccounts();
            boolean rhsRequiringAccounts;
            rhsRequiringAccounts = that.isRequiringAccounts();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requiringAccounts", lhsRequiringAccounts), LocatorUtils.property(thatLocator, "requiringAccounts", rhsRequiringAccounts), lhsRequiringAccounts, rhsRequiringAccounts)) {
                return false;
            }
        }
        {
            boolean lhsUsingClasses;
            lhsUsingClasses = this.isUsingClasses();
            boolean rhsUsingClasses;
            rhsUsingClasses = that.isUsingClasses();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usingClasses", lhsUsingClasses), LocatorUtils.property(thatLocator, "usingClasses", rhsUsingClasses), lhsUsingClasses, rhsUsingClasses)) {
                return false;
            }
        }
        {
            Calendar lhsClosingDate;
            lhsClosingDate = this.getClosingDate();
            Calendar rhsClosingDate;
            rhsClosingDate = that.getClosingDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "closingDate", lhsClosingDate), LocatorUtils.property(thatLocator, "closingDate", rhsClosingDate), lhsClosingDate, rhsClosingDate)) {
                return false;
            }
        }
        {
            boolean lhsUsingMultiCurrency;
            lhsUsingMultiCurrency = this.isUsingMultiCurrency();
            boolean rhsUsingMultiCurrency;
            rhsUsingMultiCurrency = that.isUsingMultiCurrency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usingMultiCurrency", lhsUsingMultiCurrency), LocatorUtils.property(thatLocator, "usingMultiCurrency", rhsUsingMultiCurrency), lhsUsingMultiCurrency, rhsUsingMultiCurrency)) {
                return false;
            }
        }
        {
            CurrencyCode lhsHomeCurrency;
            lhsHomeCurrency = this.getHomeCurrency();
            CurrencyCode rhsHomeCurrency;
            rhsHomeCurrency = that.getHomeCurrency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "homeCurrency", lhsHomeCurrency), LocatorUtils.property(thatLocator, "homeCurrency", rhsHomeCurrency), lhsHomeCurrency, rhsHomeCurrency)) {
                return false;
            }
        }
        {
            boolean lhsUsingInventory;
            lhsUsingInventory = this.isUsingInventory();
            boolean rhsUsingInventory;
            rhsUsingInventory = that.isUsingInventory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usingInventory", lhsUsingInventory), LocatorUtils.property(thatLocator, "usingInventory", rhsUsingInventory), lhsUsingInventory, rhsUsingInventory)) {
                return false;
            }
        }
        {
            BigInteger lhsDaysBillsAreDue;
            lhsDaysBillsAreDue = this.getDaysBillsAreDue();
            BigInteger rhsDaysBillsAreDue;
            rhsDaysBillsAreDue = that.getDaysBillsAreDue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "daysBillsAreDue", lhsDaysBillsAreDue), LocatorUtils.property(thatLocator, "daysBillsAreDue", rhsDaysBillsAreDue), lhsDaysBillsAreDue, rhsDaysBillsAreDue)) {
                return false;
            }
        }
        {
            IdType lhsDiscountAccountId;
            lhsDiscountAccountId = this.getDiscountAccountId();
            IdType rhsDiscountAccountId;
            rhsDiscountAccountId = that.getDiscountAccountId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "discountAccountId", lhsDiscountAccountId), LocatorUtils.property(thatLocator, "discountAccountId", rhsDiscountAccountId), lhsDiscountAccountId, rhsDiscountAccountId)) {
                return false;
            }
        }
        {
            String lhsDiscountAccountName;
            lhsDiscountAccountName = this.getDiscountAccountName();
            String rhsDiscountAccountName;
            rhsDiscountAccountName = that.getDiscountAccountName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "discountAccountName", lhsDiscountAccountName), LocatorUtils.property(thatLocator, "discountAccountName", rhsDiscountAccountName), lhsDiscountAccountName, rhsDiscountAccountName)) {
                return false;
            }
        }
        {
            IdType lhsShipMethodId;
            lhsShipMethodId = this.getShipMethodId();
            IdType rhsShipMethodId;
            rhsShipMethodId = that.getShipMethodId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shipMethodId", lhsShipMethodId), LocatorUtils.property(thatLocator, "shipMethodId", rhsShipMethodId), lhsShipMethodId, rhsShipMethodId)) {
                return false;
            }
        }
        {
            String lhsShipMethodName;
            lhsShipMethodName = this.getShipMethodName();
            String rhsShipMethodName;
            rhsShipMethodName = that.getShipMethodName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shipMethodName", lhsShipMethodName), LocatorUtils.property(thatLocator, "shipMethodName", rhsShipMethodName), lhsShipMethodName, rhsShipMethodName)) {
                return false;
            }
        }
        {
            BigDecimal lhsDefaultMarkup;
            lhsDefaultMarkup = this.getDefaultMarkup();
            BigDecimal rhsDefaultMarkup;
            rhsDefaultMarkup = that.getDefaultMarkup();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "defaultMarkup", lhsDefaultMarkup), LocatorUtils.property(thatLocator, "defaultMarkup", rhsDefaultMarkup), lhsDefaultMarkup, rhsDefaultMarkup)) {
                return false;
            }
        }
        {
            boolean lhsTrackReimbursableExpenses;
            lhsTrackReimbursableExpenses = this.isTrackReimbursableExpenses();
            boolean rhsTrackReimbursableExpenses;
            rhsTrackReimbursableExpenses = that.isTrackReimbursableExpenses();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "trackReimbursableExpenses", lhsTrackReimbursableExpenses), LocatorUtils.property(thatLocator, "trackReimbursableExpenses", rhsTrackReimbursableExpenses), lhsTrackReimbursableExpenses, rhsTrackReimbursableExpenses)) {
                return false;
            }
        }
        {
            boolean lhsAutoApplyPayments;
            lhsAutoApplyPayments = this.isAutoApplyPayments();
            boolean rhsAutoApplyPayments;
            rhsAutoApplyPayments = that.isAutoApplyPayments();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "autoApplyPayments", lhsAutoApplyPayments), LocatorUtils.property(thatLocator, "autoApplyPayments", rhsAutoApplyPayments), lhsAutoApplyPayments, rhsAutoApplyPayments)) {
                return false;
            }
        }
        {
            IdType lhsTaxId;
            lhsTaxId = this.getTaxId();
            IdType rhsTaxId;
            rhsTaxId = that.getTaxId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "taxId", lhsTaxId), LocatorUtils.property(thatLocator, "taxId", rhsTaxId), lhsTaxId, rhsTaxId)) {
                return false;
            }
        }
        {
            String lhsTaxName;
            lhsTaxName = this.getTaxName();
            String rhsTaxName;
            rhsTaxName = that.getTaxName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "taxName", lhsTaxName), LocatorUtils.property(thatLocator, "taxName", rhsTaxName), lhsTaxName, rhsTaxName)) {
                return false;
            }
        }
        {
            IdType lhsTaxGroupId;
            lhsTaxGroupId = this.getTaxGroupId();
            IdType rhsTaxGroupId;
            rhsTaxGroupId = that.getTaxGroupId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "taxGroupId", lhsTaxGroupId), LocatorUtils.property(thatLocator, "taxGroupId", rhsTaxGroupId), lhsTaxGroupId, rhsTaxGroupId)) {
                return false;
            }
        }
        {
            String lhsTaxGroupName;
            lhsTaxGroupName = this.getTaxGroupName();
            String rhsTaxGroupName;
            rhsTaxGroupName = that.getTaxGroupName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "taxGroupName", lhsTaxGroupName), LocatorUtils.property(thatLocator, "taxGroupName", rhsTaxGroupName), lhsTaxGroupName, rhsTaxGroupName)) {
                return false;
            }
        }
        {
            PaySalesTaxEnum lhsPaySalesTax;
            lhsPaySalesTax = this.getPaySalesTax();
            PaySalesTaxEnum rhsPaySalesTax;
            rhsPaySalesTax = that.getPaySalesTax();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paySalesTax", lhsPaySalesTax), LocatorUtils.property(thatLocator, "paySalesTax", rhsPaySalesTax), lhsPaySalesTax, rhsPaySalesTax)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            boolean theUsingAccountNumbers;
            theUsingAccountNumbers = this.isUsingAccountNumbers();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usingAccountNumbers", theUsingAccountNumbers), currentHashCode, theUsingAccountNumbers);
        }
        {
            boolean theRequiringAccounts;
            theRequiringAccounts = this.isRequiringAccounts();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requiringAccounts", theRequiringAccounts), currentHashCode, theRequiringAccounts);
        }
        {
            boolean theUsingClasses;
            theUsingClasses = this.isUsingClasses();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usingClasses", theUsingClasses), currentHashCode, theUsingClasses);
        }
        {
            Calendar theClosingDate;
            theClosingDate = this.getClosingDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "closingDate", theClosingDate), currentHashCode, theClosingDate);
        }
        {
            boolean theUsingMultiCurrency;
            theUsingMultiCurrency = this.isUsingMultiCurrency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usingMultiCurrency", theUsingMultiCurrency), currentHashCode, theUsingMultiCurrency);
        }
        {
            CurrencyCode theHomeCurrency;
            theHomeCurrency = this.getHomeCurrency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "homeCurrency", theHomeCurrency), currentHashCode, theHomeCurrency);
        }
        {
            boolean theUsingInventory;
            theUsingInventory = this.isUsingInventory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usingInventory", theUsingInventory), currentHashCode, theUsingInventory);
        }
        {
            BigInteger theDaysBillsAreDue;
            theDaysBillsAreDue = this.getDaysBillsAreDue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "daysBillsAreDue", theDaysBillsAreDue), currentHashCode, theDaysBillsAreDue);
        }
        {
            IdType theDiscountAccountId;
            theDiscountAccountId = this.getDiscountAccountId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "discountAccountId", theDiscountAccountId), currentHashCode, theDiscountAccountId);
        }
        {
            String theDiscountAccountName;
            theDiscountAccountName = this.getDiscountAccountName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "discountAccountName", theDiscountAccountName), currentHashCode, theDiscountAccountName);
        }
        {
            IdType theShipMethodId;
            theShipMethodId = this.getShipMethodId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shipMethodId", theShipMethodId), currentHashCode, theShipMethodId);
        }
        {
            String theShipMethodName;
            theShipMethodName = this.getShipMethodName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shipMethodName", theShipMethodName), currentHashCode, theShipMethodName);
        }
        {
            BigDecimal theDefaultMarkup;
            theDefaultMarkup = this.getDefaultMarkup();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "defaultMarkup", theDefaultMarkup), currentHashCode, theDefaultMarkup);
        }
        {
            boolean theTrackReimbursableExpenses;
            theTrackReimbursableExpenses = this.isTrackReimbursableExpenses();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "trackReimbursableExpenses", theTrackReimbursableExpenses), currentHashCode, theTrackReimbursableExpenses);
        }
        {
            boolean theAutoApplyPayments;
            theAutoApplyPayments = this.isAutoApplyPayments();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "autoApplyPayments", theAutoApplyPayments), currentHashCode, theAutoApplyPayments);
        }
        {
            IdType theTaxId;
            theTaxId = this.getTaxId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "taxId", theTaxId), currentHashCode, theTaxId);
        }
        {
            String theTaxName;
            theTaxName = this.getTaxName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "taxName", theTaxName), currentHashCode, theTaxName);
        }
        {
            IdType theTaxGroupId;
            theTaxGroupId = this.getTaxGroupId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "taxGroupId", theTaxGroupId), currentHashCode, theTaxGroupId);
        }
        {
            String theTaxGroupName;
            theTaxGroupName = this.getTaxGroupName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "taxGroupName", theTaxGroupName), currentHashCode, theTaxGroupName);
        }
        {
            PaySalesTaxEnum thePaySalesTax;
            thePaySalesTax = this.getPaySalesTax();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paySalesTax", thePaySalesTax), currentHashCode, thePaySalesTax);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
